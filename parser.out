Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> PRINT STRING SEMI
Rule 5     statement -> ECHO STRING SEMI
Rule 6     statement -> IDENTIFIER EQUALS expression SEMI
Rule 7     statement -> WHILE LPAREN condition RPAREN LCURLY statements RCURLY
Rule 8     statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY
Rule 9     statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY ELSE LCURLY statements RCURLY
Rule 10    condition -> IDENTIFIER GREATERTHAN IDENTIFIER
Rule 11    condition -> IDENTIFIER LESSEQUAL IDENTIFIER
Rule 12    condition -> IDENTIFIER MOD NUMBER EQUALS NUMBER
Rule 13    expression -> expression PLUS expression
Rule 14    expression -> expression DIVIDE expression
Rule 15    expression -> expression MOD expression
Rule 16    expression -> expression CONCAT expression
Rule 17    expression -> NOT expression
Rule 18    expression -> LPAREN expression RPAREN
Rule 19    expression -> NUMBER
Rule 20    expression -> IDENTIFIER
Rule 21    statement -> RETURN expression SEMI

Terminals, with rules where they appear

CONCAT               : 16
DIVIDE               : 14
ECHO                 : 5
ELSE                 : 9
EQUALS               : 6 12
GREATERTHAN          : 10
IDENTIFIER           : 6 10 10 11 11 12 20
IF                   : 8 9
LCURLY               : 7 8 9 9
LESSEQUAL            : 11
LPAREN               : 7 8 9 18
MOD                  : 12 15
NOT                  : 17
NUMBER               : 12 12 19
PLUS                 : 13
PRINT                : 4
RCURLY               : 7 8 9 9
RETURN               : 21
RPAREN               : 7 8 9 18
SEMI                 : 4 5 6 21
STRING               : 4 5
WHILE                : 7
error                : 

Nonterminals, with rules where they appear

condition            : 7 8 9
expression           : 6 13 13 14 14 15 15 16 16 17 18 21
program              : 0
statement            : 2 3
statements           : 1 2 7 8 9 9

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . PRINT STRING SEMI
    (5) statement -> . ECHO STRING SEMI
    (6) statement -> . IDENTIFIER EQUALS expression SEMI
    (7) statement -> . WHILE LPAREN condition RPAREN LCURLY statements RCURLY
    (8) statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY
    (9) statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (21) statement -> . RETURN expression SEMI

    PRINT           shift and go to state 4
    ECHO            shift and go to state 5
    IDENTIFIER      shift and go to state 6
    WHILE           shift and go to state 7
    IF              shift and go to state 8
    RETURN          shift and go to state 9

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . PRINT STRING SEMI
    (5) statement -> . ECHO STRING SEMI
    (6) statement -> . IDENTIFIER EQUALS expression SEMI
    (7) statement -> . WHILE LPAREN condition RPAREN LCURLY statements RCURLY
    (8) statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY
    (9) statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (21) statement -> . RETURN expression SEMI

    $end            reduce using rule 1 (program -> statements .)
    PRINT           shift and go to state 4
    ECHO            shift and go to state 5
    IDENTIFIER      shift and go to state 6
    WHILE           shift and go to state 7
    IF              shift and go to state 8
    RETURN          shift and go to state 9

    statement                      shift and go to state 10

state 3

    (3) statements -> statement .

    PRINT           reduce using rule 3 (statements -> statement .)
    ECHO            reduce using rule 3 (statements -> statement .)
    IDENTIFIER      reduce using rule 3 (statements -> statement .)
    WHILE           reduce using rule 3 (statements -> statement .)
    IF              reduce using rule 3 (statements -> statement .)
    RETURN          reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)
    RCURLY          reduce using rule 3 (statements -> statement .)


state 4

    (4) statement -> PRINT . STRING SEMI

    STRING          shift and go to state 11


state 5

    (5) statement -> ECHO . STRING SEMI

    STRING          shift and go to state 12


state 6

    (6) statement -> IDENTIFIER . EQUALS expression SEMI

    EQUALS          shift and go to state 13


state 7

    (7) statement -> WHILE . LPAREN condition RPAREN LCURLY statements RCURLY

    LPAREN          shift and go to state 14


state 8

    (8) statement -> IF . LPAREN condition RPAREN LCURLY statements RCURLY
    (9) statement -> IF . LPAREN condition RPAREN LCURLY statements RCURLY ELSE LCURLY statements RCURLY

    LPAREN          shift and go to state 15


state 9

    (21) statement -> RETURN . expression SEMI
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression MOD expression
    (16) expression -> . expression CONCAT expression
    (17) expression -> . NOT expression
    (18) expression -> . LPAREN expression RPAREN
    (19) expression -> . NUMBER
    (20) expression -> . IDENTIFIER

    NOT             shift and go to state 17
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 20

    expression                     shift and go to state 16

state 10

    (2) statements -> statements statement .

    PRINT           reduce using rule 2 (statements -> statements statement .)
    ECHO            reduce using rule 2 (statements -> statements statement .)
    IDENTIFIER      reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    RETURN          reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    RCURLY          reduce using rule 2 (statements -> statements statement .)


state 11

    (4) statement -> PRINT STRING . SEMI

    SEMI            shift and go to state 21


state 12

    (5) statement -> ECHO STRING . SEMI

    SEMI            shift and go to state 22


state 13

    (6) statement -> IDENTIFIER EQUALS . expression SEMI
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression MOD expression
    (16) expression -> . expression CONCAT expression
    (17) expression -> . NOT expression
    (18) expression -> . LPAREN expression RPAREN
    (19) expression -> . NUMBER
    (20) expression -> . IDENTIFIER

    NOT             shift and go to state 17
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 20

    expression                     shift and go to state 23

state 14

    (7) statement -> WHILE LPAREN . condition RPAREN LCURLY statements RCURLY
    (10) condition -> . IDENTIFIER GREATERTHAN IDENTIFIER
    (11) condition -> . IDENTIFIER LESSEQUAL IDENTIFIER
    (12) condition -> . IDENTIFIER MOD NUMBER EQUALS NUMBER

    IDENTIFIER      shift and go to state 25

    condition                      shift and go to state 24

state 15

    (8) statement -> IF LPAREN . condition RPAREN LCURLY statements RCURLY
    (9) statement -> IF LPAREN . condition RPAREN LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (10) condition -> . IDENTIFIER GREATERTHAN IDENTIFIER
    (11) condition -> . IDENTIFIER LESSEQUAL IDENTIFIER
    (12) condition -> . IDENTIFIER MOD NUMBER EQUALS NUMBER

    IDENTIFIER      shift and go to state 25

    condition                      shift and go to state 26

state 16

    (21) statement -> RETURN expression . SEMI
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . MOD expression
    (16) expression -> expression . CONCAT expression

    SEMI            shift and go to state 27
    PLUS            shift and go to state 28
    DIVIDE          shift and go to state 29
    MOD             shift and go to state 30
    CONCAT          shift and go to state 31


state 17

    (17) expression -> NOT . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression MOD expression
    (16) expression -> . expression CONCAT expression
    (17) expression -> . NOT expression
    (18) expression -> . LPAREN expression RPAREN
    (19) expression -> . NUMBER
    (20) expression -> . IDENTIFIER

    NOT             shift and go to state 17
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 20

    expression                     shift and go to state 32

state 18

    (18) expression -> LPAREN . expression RPAREN
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression MOD expression
    (16) expression -> . expression CONCAT expression
    (17) expression -> . NOT expression
    (18) expression -> . LPAREN expression RPAREN
    (19) expression -> . NUMBER
    (20) expression -> . IDENTIFIER

    NOT             shift and go to state 17
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 20

    expression                     shift and go to state 33

state 19

    (19) expression -> NUMBER .

    SEMI            reduce using rule 19 (expression -> NUMBER .)
    PLUS            reduce using rule 19 (expression -> NUMBER .)
    DIVIDE          reduce using rule 19 (expression -> NUMBER .)
    MOD             reduce using rule 19 (expression -> NUMBER .)
    CONCAT          reduce using rule 19 (expression -> NUMBER .)
    RPAREN          reduce using rule 19 (expression -> NUMBER .)


state 20

    (20) expression -> IDENTIFIER .

    SEMI            reduce using rule 20 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 20 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 20 (expression -> IDENTIFIER .)
    MOD             reduce using rule 20 (expression -> IDENTIFIER .)
    CONCAT          reduce using rule 20 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 20 (expression -> IDENTIFIER .)


state 21

    (4) statement -> PRINT STRING SEMI .

    PRINT           reduce using rule 4 (statement -> PRINT STRING SEMI .)
    ECHO            reduce using rule 4 (statement -> PRINT STRING SEMI .)
    IDENTIFIER      reduce using rule 4 (statement -> PRINT STRING SEMI .)
    WHILE           reduce using rule 4 (statement -> PRINT STRING SEMI .)
    IF              reduce using rule 4 (statement -> PRINT STRING SEMI .)
    RETURN          reduce using rule 4 (statement -> PRINT STRING SEMI .)
    $end            reduce using rule 4 (statement -> PRINT STRING SEMI .)
    RCURLY          reduce using rule 4 (statement -> PRINT STRING SEMI .)


state 22

    (5) statement -> ECHO STRING SEMI .

    PRINT           reduce using rule 5 (statement -> ECHO STRING SEMI .)
    ECHO            reduce using rule 5 (statement -> ECHO STRING SEMI .)
    IDENTIFIER      reduce using rule 5 (statement -> ECHO STRING SEMI .)
    WHILE           reduce using rule 5 (statement -> ECHO STRING SEMI .)
    IF              reduce using rule 5 (statement -> ECHO STRING SEMI .)
    RETURN          reduce using rule 5 (statement -> ECHO STRING SEMI .)
    $end            reduce using rule 5 (statement -> ECHO STRING SEMI .)
    RCURLY          reduce using rule 5 (statement -> ECHO STRING SEMI .)


state 23

    (6) statement -> IDENTIFIER EQUALS expression . SEMI
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . MOD expression
    (16) expression -> expression . CONCAT expression

    SEMI            shift and go to state 34
    PLUS            shift and go to state 28
    DIVIDE          shift and go to state 29
    MOD             shift and go to state 30
    CONCAT          shift and go to state 31


state 24

    (7) statement -> WHILE LPAREN condition . RPAREN LCURLY statements RCURLY

    RPAREN          shift and go to state 35


state 25

    (10) condition -> IDENTIFIER . GREATERTHAN IDENTIFIER
    (11) condition -> IDENTIFIER . LESSEQUAL IDENTIFIER
    (12) condition -> IDENTIFIER . MOD NUMBER EQUALS NUMBER

    GREATERTHAN     shift and go to state 36
    LESSEQUAL       shift and go to state 37
    MOD             shift and go to state 38


state 26

    (8) statement -> IF LPAREN condition . RPAREN LCURLY statements RCURLY
    (9) statement -> IF LPAREN condition . RPAREN LCURLY statements RCURLY ELSE LCURLY statements RCURLY

    RPAREN          shift and go to state 39


state 27

    (21) statement -> RETURN expression SEMI .

    PRINT           reduce using rule 21 (statement -> RETURN expression SEMI .)
    ECHO            reduce using rule 21 (statement -> RETURN expression SEMI .)
    IDENTIFIER      reduce using rule 21 (statement -> RETURN expression SEMI .)
    WHILE           reduce using rule 21 (statement -> RETURN expression SEMI .)
    IF              reduce using rule 21 (statement -> RETURN expression SEMI .)
    RETURN          reduce using rule 21 (statement -> RETURN expression SEMI .)
    $end            reduce using rule 21 (statement -> RETURN expression SEMI .)
    RCURLY          reduce using rule 21 (statement -> RETURN expression SEMI .)


state 28

    (13) expression -> expression PLUS . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression MOD expression
    (16) expression -> . expression CONCAT expression
    (17) expression -> . NOT expression
    (18) expression -> . LPAREN expression RPAREN
    (19) expression -> . NUMBER
    (20) expression -> . IDENTIFIER

    NOT             shift and go to state 17
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 20

    expression                     shift and go to state 40

state 29

    (14) expression -> expression DIVIDE . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression MOD expression
    (16) expression -> . expression CONCAT expression
    (17) expression -> . NOT expression
    (18) expression -> . LPAREN expression RPAREN
    (19) expression -> . NUMBER
    (20) expression -> . IDENTIFIER

    NOT             shift and go to state 17
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 20

    expression                     shift and go to state 41

state 30

    (15) expression -> expression MOD . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression MOD expression
    (16) expression -> . expression CONCAT expression
    (17) expression -> . NOT expression
    (18) expression -> . LPAREN expression RPAREN
    (19) expression -> . NUMBER
    (20) expression -> . IDENTIFIER

    NOT             shift and go to state 17
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 20

    expression                     shift and go to state 42

state 31

    (16) expression -> expression CONCAT . expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression MOD expression
    (16) expression -> . expression CONCAT expression
    (17) expression -> . NOT expression
    (18) expression -> . LPAREN expression RPAREN
    (19) expression -> . NUMBER
    (20) expression -> . IDENTIFIER

    NOT             shift and go to state 17
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 19
    IDENTIFIER      shift and go to state 20

    expression                     shift and go to state 43

state 32

    (17) expression -> NOT expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . MOD expression
    (16) expression -> expression . CONCAT expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for CONCAT resolved as shift
    SEMI            reduce using rule 17 (expression -> NOT expression .)
    RPAREN          reduce using rule 17 (expression -> NOT expression .)
    PLUS            shift and go to state 28
    DIVIDE          shift and go to state 29
    MOD             shift and go to state 30
    CONCAT          shift and go to state 31

  ! PLUS            [ reduce using rule 17 (expression -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 17 (expression -> NOT expression .) ]
  ! MOD             [ reduce using rule 17 (expression -> NOT expression .) ]
  ! CONCAT          [ reduce using rule 17 (expression -> NOT expression .) ]


state 33

    (18) expression -> LPAREN expression . RPAREN
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . MOD expression
    (16) expression -> expression . CONCAT expression

    RPAREN          shift and go to state 44
    PLUS            shift and go to state 28
    DIVIDE          shift and go to state 29
    MOD             shift and go to state 30
    CONCAT          shift and go to state 31


state 34

    (6) statement -> IDENTIFIER EQUALS expression SEMI .

    PRINT           reduce using rule 6 (statement -> IDENTIFIER EQUALS expression SEMI .)
    ECHO            reduce using rule 6 (statement -> IDENTIFIER EQUALS expression SEMI .)
    IDENTIFIER      reduce using rule 6 (statement -> IDENTIFIER EQUALS expression SEMI .)
    WHILE           reduce using rule 6 (statement -> IDENTIFIER EQUALS expression SEMI .)
    IF              reduce using rule 6 (statement -> IDENTIFIER EQUALS expression SEMI .)
    RETURN          reduce using rule 6 (statement -> IDENTIFIER EQUALS expression SEMI .)
    $end            reduce using rule 6 (statement -> IDENTIFIER EQUALS expression SEMI .)
    RCURLY          reduce using rule 6 (statement -> IDENTIFIER EQUALS expression SEMI .)


state 35

    (7) statement -> WHILE LPAREN condition RPAREN . LCURLY statements RCURLY

    LCURLY          shift and go to state 45


state 36

    (10) condition -> IDENTIFIER GREATERTHAN . IDENTIFIER

    IDENTIFIER      shift and go to state 46


state 37

    (11) condition -> IDENTIFIER LESSEQUAL . IDENTIFIER

    IDENTIFIER      shift and go to state 47


state 38

    (12) condition -> IDENTIFIER MOD . NUMBER EQUALS NUMBER

    NUMBER          shift and go to state 48


state 39

    (8) statement -> IF LPAREN condition RPAREN . LCURLY statements RCURLY
    (9) statement -> IF LPAREN condition RPAREN . LCURLY statements RCURLY ELSE LCURLY statements RCURLY

    LCURLY          shift and go to state 49


state 40

    (13) expression -> expression PLUS expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . MOD expression
    (16) expression -> expression . CONCAT expression

    SEMI            reduce using rule 13 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 13 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 13 (expression -> expression PLUS expression .)
    DIVIDE          shift and go to state 29
    MOD             shift and go to state 30
    CONCAT          shift and go to state 31

  ! DIVIDE          [ reduce using rule 13 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 13 (expression -> expression PLUS expression .) ]
  ! CONCAT          [ reduce using rule 13 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 28 ]


state 41

    (14) expression -> expression DIVIDE expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . MOD expression
    (16) expression -> expression . CONCAT expression

    SEMI            reduce using rule 14 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 14 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 14 (expression -> expression DIVIDE expression .)
    MOD             reduce using rule 14 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 14 (expression -> expression DIVIDE expression .)
    CONCAT          shift and go to state 31

  ! CONCAT          [ reduce using rule 14 (expression -> expression DIVIDE expression .) ]
  ! PLUS            [ shift and go to state 28 ]
  ! DIVIDE          [ shift and go to state 29 ]
  ! MOD             [ shift and go to state 30 ]


state 42

    (15) expression -> expression MOD expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . MOD expression
    (16) expression -> expression . CONCAT expression

    SEMI            reduce using rule 15 (expression -> expression MOD expression .)
    PLUS            reduce using rule 15 (expression -> expression MOD expression .)
    DIVIDE          reduce using rule 15 (expression -> expression MOD expression .)
    MOD             reduce using rule 15 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 15 (expression -> expression MOD expression .)
    CONCAT          shift and go to state 31

  ! CONCAT          [ reduce using rule 15 (expression -> expression MOD expression .) ]
  ! PLUS            [ shift and go to state 28 ]
  ! DIVIDE          [ shift and go to state 29 ]
  ! MOD             [ shift and go to state 30 ]


state 43

    (16) expression -> expression CONCAT expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . MOD expression
    (16) expression -> expression . CONCAT expression

    SEMI            reduce using rule 16 (expression -> expression CONCAT expression .)
    PLUS            reduce using rule 16 (expression -> expression CONCAT expression .)
    DIVIDE          reduce using rule 16 (expression -> expression CONCAT expression .)
    MOD             reduce using rule 16 (expression -> expression CONCAT expression .)
    CONCAT          reduce using rule 16 (expression -> expression CONCAT expression .)
    RPAREN          reduce using rule 16 (expression -> expression CONCAT expression .)

  ! PLUS            [ shift and go to state 28 ]
  ! DIVIDE          [ shift and go to state 29 ]
  ! MOD             [ shift and go to state 30 ]
  ! CONCAT          [ shift and go to state 31 ]


state 44

    (18) expression -> LPAREN expression RPAREN .

    SEMI            reduce using rule 18 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 18 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 18 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 18 (expression -> LPAREN expression RPAREN .)
    CONCAT          reduce using rule 18 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 18 (expression -> LPAREN expression RPAREN .)


state 45

    (7) statement -> WHILE LPAREN condition RPAREN LCURLY . statements RCURLY
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . PRINT STRING SEMI
    (5) statement -> . ECHO STRING SEMI
    (6) statement -> . IDENTIFIER EQUALS expression SEMI
    (7) statement -> . WHILE LPAREN condition RPAREN LCURLY statements RCURLY
    (8) statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY
    (9) statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (21) statement -> . RETURN expression SEMI

    PRINT           shift and go to state 4
    ECHO            shift and go to state 5
    IDENTIFIER      shift and go to state 6
    WHILE           shift and go to state 7
    IF              shift and go to state 8
    RETURN          shift and go to state 9

    statements                     shift and go to state 50
    statement                      shift and go to state 3

state 46

    (10) condition -> IDENTIFIER GREATERTHAN IDENTIFIER .

    RPAREN          reduce using rule 10 (condition -> IDENTIFIER GREATERTHAN IDENTIFIER .)


state 47

    (11) condition -> IDENTIFIER LESSEQUAL IDENTIFIER .

    RPAREN          reduce using rule 11 (condition -> IDENTIFIER LESSEQUAL IDENTIFIER .)


state 48

    (12) condition -> IDENTIFIER MOD NUMBER . EQUALS NUMBER

    EQUALS          shift and go to state 51


state 49

    (8) statement -> IF LPAREN condition RPAREN LCURLY . statements RCURLY
    (9) statement -> IF LPAREN condition RPAREN LCURLY . statements RCURLY ELSE LCURLY statements RCURLY
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . PRINT STRING SEMI
    (5) statement -> . ECHO STRING SEMI
    (6) statement -> . IDENTIFIER EQUALS expression SEMI
    (7) statement -> . WHILE LPAREN condition RPAREN LCURLY statements RCURLY
    (8) statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY
    (9) statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (21) statement -> . RETURN expression SEMI

    PRINT           shift and go to state 4
    ECHO            shift and go to state 5
    IDENTIFIER      shift and go to state 6
    WHILE           shift and go to state 7
    IF              shift and go to state 8
    RETURN          shift and go to state 9

    statements                     shift and go to state 52
    statement                      shift and go to state 3

state 50

    (7) statement -> WHILE LPAREN condition RPAREN LCURLY statements . RCURLY
    (2) statements -> statements . statement
    (4) statement -> . PRINT STRING SEMI
    (5) statement -> . ECHO STRING SEMI
    (6) statement -> . IDENTIFIER EQUALS expression SEMI
    (7) statement -> . WHILE LPAREN condition RPAREN LCURLY statements RCURLY
    (8) statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY
    (9) statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (21) statement -> . RETURN expression SEMI

    RCURLY          shift and go to state 53
    PRINT           shift and go to state 4
    ECHO            shift and go to state 5
    IDENTIFIER      shift and go to state 6
    WHILE           shift and go to state 7
    IF              shift and go to state 8
    RETURN          shift and go to state 9

    statement                      shift and go to state 10

state 51

    (12) condition -> IDENTIFIER MOD NUMBER EQUALS . NUMBER

    NUMBER          shift and go to state 54


state 52

    (8) statement -> IF LPAREN condition RPAREN LCURLY statements . RCURLY
    (9) statement -> IF LPAREN condition RPAREN LCURLY statements . RCURLY ELSE LCURLY statements RCURLY
    (2) statements -> statements . statement
    (4) statement -> . PRINT STRING SEMI
    (5) statement -> . ECHO STRING SEMI
    (6) statement -> . IDENTIFIER EQUALS expression SEMI
    (7) statement -> . WHILE LPAREN condition RPAREN LCURLY statements RCURLY
    (8) statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY
    (9) statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (21) statement -> . RETURN expression SEMI

    RCURLY          shift and go to state 55
    PRINT           shift and go to state 4
    ECHO            shift and go to state 5
    IDENTIFIER      shift and go to state 6
    WHILE           shift and go to state 7
    IF              shift and go to state 8
    RETURN          shift and go to state 9

    statement                      shift and go to state 10

state 53

    (7) statement -> WHILE LPAREN condition RPAREN LCURLY statements RCURLY .

    PRINT           reduce using rule 7 (statement -> WHILE LPAREN condition RPAREN LCURLY statements RCURLY .)
    ECHO            reduce using rule 7 (statement -> WHILE LPAREN condition RPAREN LCURLY statements RCURLY .)
    IDENTIFIER      reduce using rule 7 (statement -> WHILE LPAREN condition RPAREN LCURLY statements RCURLY .)
    WHILE           reduce using rule 7 (statement -> WHILE LPAREN condition RPAREN LCURLY statements RCURLY .)
    IF              reduce using rule 7 (statement -> WHILE LPAREN condition RPAREN LCURLY statements RCURLY .)
    RETURN          reduce using rule 7 (statement -> WHILE LPAREN condition RPAREN LCURLY statements RCURLY .)
    $end            reduce using rule 7 (statement -> WHILE LPAREN condition RPAREN LCURLY statements RCURLY .)
    RCURLY          reduce using rule 7 (statement -> WHILE LPAREN condition RPAREN LCURLY statements RCURLY .)


state 54

    (12) condition -> IDENTIFIER MOD NUMBER EQUALS NUMBER .

    RPAREN          reduce using rule 12 (condition -> IDENTIFIER MOD NUMBER EQUALS NUMBER .)


state 55

    (8) statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY .
    (9) statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY . ELSE LCURLY statements RCURLY

    PRINT           reduce using rule 8 (statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY .)
    ECHO            reduce using rule 8 (statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY .)
    IDENTIFIER      reduce using rule 8 (statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY .)
    WHILE           reduce using rule 8 (statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY .)
    IF              reduce using rule 8 (statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY .)
    RETURN          reduce using rule 8 (statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY .)
    $end            reduce using rule 8 (statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY .)
    RCURLY          reduce using rule 8 (statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY .)
    ELSE            shift and go to state 56


state 56

    (9) statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY ELSE . LCURLY statements RCURLY

    LCURLY          shift and go to state 57


state 57

    (9) statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY ELSE LCURLY . statements RCURLY
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . PRINT STRING SEMI
    (5) statement -> . ECHO STRING SEMI
    (6) statement -> . IDENTIFIER EQUALS expression SEMI
    (7) statement -> . WHILE LPAREN condition RPAREN LCURLY statements RCURLY
    (8) statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY
    (9) statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (21) statement -> . RETURN expression SEMI

    PRINT           shift and go to state 4
    ECHO            shift and go to state 5
    IDENTIFIER      shift and go to state 6
    WHILE           shift and go to state 7
    IF              shift and go to state 8
    RETURN          shift and go to state 9

    statements                     shift and go to state 58
    statement                      shift and go to state 3

state 58

    (9) statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY ELSE LCURLY statements . RCURLY
    (2) statements -> statements . statement
    (4) statement -> . PRINT STRING SEMI
    (5) statement -> . ECHO STRING SEMI
    (6) statement -> . IDENTIFIER EQUALS expression SEMI
    (7) statement -> . WHILE LPAREN condition RPAREN LCURLY statements RCURLY
    (8) statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY
    (9) statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (21) statement -> . RETURN expression SEMI

    RCURLY          shift and go to state 59
    PRINT           shift and go to state 4
    ECHO            shift and go to state 5
    IDENTIFIER      shift and go to state 6
    WHILE           shift and go to state 7
    IF              shift and go to state 8
    RETURN          shift and go to state 9

    statement                      shift and go to state 10

state 59

    (9) statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY ELSE LCURLY statements RCURLY .

    PRINT           reduce using rule 9 (statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    ECHO            reduce using rule 9 (statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    IDENTIFIER      reduce using rule 9 (statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    WHILE           reduce using rule 9 (statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    IF              reduce using rule 9 (statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    RETURN          reduce using rule 9 (statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    $end            reduce using rule 9 (statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    RCURLY          reduce using rule 9 (statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 32 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 32 resolved as shift
WARNING: shift/reduce conflict for MOD in state 32 resolved as shift
WARNING: shift/reduce conflict for CONCAT in state 32 resolved as shift
